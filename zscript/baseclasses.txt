class SGDWeapon : Weapon
{
	Default
	{
		Weapon.Kickback 80;
		Inventory.PickupSound "misc/wpnpickup";
		+WEAPON.ALT_AMMO_OPTIONAL;
		+WEAPON.NOALERT;
		+WEAPON.NOAUTOAIM;
	}

	States
	{
	Select:
		TNT1 AAA 0 A_Raise;
		"####" "#" 1 A_Raise;
		Goto Select+2;
	Deselect:
		TNT1 AAA 0 A_Lower;
		"####" "#" 1 A_Lower;
		Goto Deselect+2;
	Ready:
		TNT1 A 0;
		Goto ReadyLoop;
	ReadyLoop:
		"####" "#" 1
		{
			A_WeaponReady();
			ACS_NamedExecute("FeatTracker",0);
		}
		Loop;
	Fire:
		TNT1 A 0;
		Goto ReadyLoop;
	AltFire:
		"####" "#" 0 A_JumpIf(CountInv("FinisherToken") < 300,"FinisherFail");
		"####" "#" 0 A_JumpIf(CountInv("FinisherToken") >= 300 && CountInv("FinisherToken") < 600,"Finisher1");
		"####" "#" 0 A_JumpIf(CountInv("FinisherToken") >= 600 && CountInv("FinisherToken") < 900,"Finisher2");
		"####" "#" 0 A_JumpIf(CountInv("FinisherToken") >= 900,"Finisher3");
	FinisherFail:
		"####" "#" 0;
		Goto ReadyLoop;
	Finisher1:
		TNT1 A 0;
		Goto ReadyLoop;
	Finisher2:
		TNT1 A 0;
		Goto ReadyLoop;
	Finisher3:
		TNT1 A 0;
		Goto ReadyLoop;
	}
}

extend class SGDWeapon
{
	action void A_BeginFinisher(bool freeze)
	{
		A_TakeInventory("FinisherToken",0x7FFFFFFF);
		A_GiveInventory("FinisherInvul",1);
		
		if(freeze)
		{
			A_Stop();
			A_GiveInventory("FinisherFreeze",1);
		}
	}
	
	action void A_EndFinisher()
	{
		A_TakeInventory("FinisherInvul",1);
		
		if(FindInventory("FinisherFreeze"))
		{
			A_TakeInventory("FinisherFreeze",1);
		}
	}
}

class WeaponUpgrade : Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
		-INVENTORY.INVBAR;
	}
}


class FakePowerup : PowerDamage
// Base class for powerup color setters.
{
	Default
	{
		DamageFactor "Normal", 1.0;
		DamageFactor "Fire", 1.0;
		DamageFactor "HolyWater", 1.0;
		DamageFactor "Sploder", 1.0;
		DamageFactor "ArgentBomb", 1.0;
		DamageFactor "ShotgunSlug", 1.0;
		DamageFactor "Sawblade", 1.0;
		Powerup.Duration 0x7FFFFFFD;
	}
}

class SGDMonster : Actor
{
	Default
	{
		PainChance "HolyWater", 255;
		PainChance "ShotgunSlug", 255;
		PainChance "Sawblade", 255;
		PainChance "Fire", 200;
		PainChance "Sploder", 200;
		PainChance "ArgentBomb", 200;
		MONSTER;
		+FLOORCLIP;
		+MISSILEMORE;
	}
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		
		switch(CVar.FindCVar('sgd_spawnbehavior').GetInt())
		{
		case 0:
			SetStateLabel("Spawn");
			break;
		case 1:
			SetStateLabel("AltSpawn");
			break;
		}
	}
}

extend class SGDMonster
{
	action void A_PosAttackFixedSound()
	{
		if (target)
		{
			A_FaceTarget();
			double ang = angle;
			double slope = AimLineAttack(ang, MISSILERANGE);
			A_StartSound(AttackSound);
			ang  += Random2[PosAttack]() * (22.5/256);
			int damage = Random[PosAttack](1, 5) * 3;
			LineAttack(ang, MISSILERANGE, slope, damage, "Hitscan", "Bulletpuff");
		}
	}
	
	action void A_PosAltAttack()
	{
		if(target)
		{
			A_StartSound(AttackSound);
			angle += random2() * (22.5 / 256);
			SpawnMissileAngle("ZombiemanBullet",angle,0);
		}
	}
	
	action void A_SposAltAttack()
	{
		if(target)
		{
			A_StartSound(AttackSound);
			
			for(int i = 0; i < 3; i++)
			{
				angle += random2() * (22.5 / 256);
				SpawnMissileAngle("ZombiemanBullet",angle,0);
			}
		}
	}
	
	action void A_CPosAltAttack()
	{
		if(target)
		{
			A_StartSound(AttackSound);
			angle += random2() * (22.5 / 256);
			SpawnMissileAngle("ZombiemanBullet",angle,0);
		}
	}
	
	action void A_SkelAltMissile()
	{
		if(target) { SpawnMissile(target,"SGDRevenantRocket"); }
	}
}
